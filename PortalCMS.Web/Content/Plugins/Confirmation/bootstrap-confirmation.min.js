/*! * Bootstrap Confirmation v1.0.5 * https://github.com/tavicu/bs-confirmation */ +function (a) {
    "use strict"; var b = !1, c = function (c, d) {
        var e = this; this.init("confirmation", c, d),
            a(c).on("show.bs.confirmation", function (b) {
                e.options.onShow(b, this),
                    a(this).addClass("open");
                var c = e.options, d = c.all_selector; c.singleton && a(d).not(e.$element).each(function () { a(this).hasClass("open") && a(this).confirmation("hide") })
            }),
            a(c).on("hide.bs.confirmation", function (b) {
                e.options.onHide(b, this),
                    a(this).removeClass("open")
            }),
            a(c).on("shown.bs.confirmation", function (c) {
                var d = e.options; d.all_selector; e.isPopout() && (b || (b = a("body").on("click", function (c) {
                    e.$element.is(c.target) || e.$element.has(c.target).length || a(".popover").has(c.target).length || (e.hide(),
                        e.inState.click = !1, a("body").unbind(c),
                        b = !1)
                })))
            }),
            d.selector ? a(c).on("click.bs.confirmation", d.selector, function (a) { a.preventDefault() }) : a(c).on("click.bs.confirmation", function (a) { a.preventDefault() })
    };
    if (!a.fn.popover || !a.fn.tooltip) throw new Error("Confirmation requires popover.js and tooltip.js");
    c.VERSION = "1.0.5", c.DEFAULTS = a.extend({},
        a.fn.popover.Constructor.DEFAULTS, {
            placement: "right", title: "Are you sure?", btnOkClass: "btn btn-sm btn-danger", btnOkLabel: "", btnOkIcon: "fa fa-check", btnCancelClass: "btn btn-sm btn-default", btnCancelLabel: "", btnCancelIcon: "fa fa-remove", href: "#", target: "_self", singleton: !0, popout: !0, onShow: function (a, b) { },
            onHide: function (a, b) { },
            onConfirm: function (a, b) { },
            onCancel: function (a, b) { },
            template: '<div class="popover confirmation-popover"><div class="arrow"></div><div class="popover-content"><a data-apply="confirmation"></a><a data-dismiss="confirmation"></a></div></div>'
        }),
        c.prototype = a.extend({},
            a.fn.popover.Constructor.prototype),
        c.prototype.constructor = c, c.prototype.getDefaults = function () { return c.DEFAULTS },
        c.prototype.setContent = function () {
            var b = this, c = this.tip(),
                d = this.getTitle(),
                e = c.find('[data-apply="confirmation"]'),
                f = c.find('[data-dismiss="confirmation"]'),
                g = this.options; e.addClass(this.getBtnOkClass()).html(this.getBtnOkLabel()).prepend(a("<i></i>").addClass(this.getBtnOkIcon()),
                    " ").attr("href", this.getHref()).attr("target", this.getTarget()).off("click").on("click", function (a) {
                        g.onConfirm(a, b.$element),
                            "submit" == b.$element.attr("type") && b.$element.closest("form").first().submit(),
                            b.hide(),
                            b.inState.click = !1
                    }),
                    f.addClass(this.getBtnCancelClass()).html(this.getBtnCancelLabel()).prepend(a("<i></i>").addClass(this.getBtnCancelIcon()),
                        " ").off("click").on("click", function (a) {
                            g.onCancel(a, b.$element),
                                b.hide(),
                                b.inState.click = !1
                        }),
                    c.find(".popover-title")[this.options.html ? "html" : "text"](d),
                    c.removeClass("fade top bottom left right in"),
                    c.find(".popover-title").html() || c.find(".popover-title").hide()
        },
        c.prototype.getBtnOkClass = function () { var a = this.$element, b = this.options; return a.attr("data-btnOkClass") || ("function" == typeof b.btnOkClass ? b.btnOkClass.call(this, a[0]) : b.btnOkClass) },
        c.prototype.getBtnOkLabel = function () { var a = this.$element, b = this.options; return a.attr("data-btnOkLabel") || ("function" == typeof b.btnOkLabel ? b.btnOkLabel.call(this, a[0]) : b.btnOkLabel) },
        c.prototype.getBtnOkIcon = function () { var a = this.$element, b = this.options; return a.attr("data-btnOkIcon") || ("function" == typeof b.btnOkIcon ? b.btnOkIcon.call(this, a[0]) : b.btnOkIcon) },
        c.prototype.getBtnCancelClass = function () { var a = this.$element, b = this.options; return a.attr("data-btnCancelClass") || ("function" == typeof b.btnCancelClass ? b.btnCancelClass.call(this, a[0]) : b.btnCancelClass) },
        c.prototype.getBtnCancelLabel = function () { var a = this.$element, b = this.options; return a.attr("data-btnCancelLabel") || ("function" == typeof b.btnCancelLabel ? b.btnCancelLabel.call(this, a[0]) : b.btnCancelLabel) },
        c.prototype.getBtnCancelIcon = function () { var a = this.$element, b = this.options; return a.attr("data-btnCancelIcon") || ("function" == typeof b.btnCancelIcon ? b.btnCancelIcon.call(this, a[0]) : b.btnCancelIcon) },
        c.prototype.getHref = function () { var a = this.$element, b = this.options; return a.attr("data-href") || ("function" == typeof b.href ? b.href.call(this, a[0]) : b.href) },
        c.prototype.getTarget = function () { var a = this.$element, b = this.options; return a.attr("data-target") || ("function" == typeof b.target ? b.target.call(this, a[0]) : b.target) },
        c.prototype.isPopout = function () {
            var a, b = this.$element, c = this.options; return a = b.attr("data-popout") || ("function" == typeof c.popout ? c.popout.call(this, b[0]) : c.popout),
                "false" == a && (a = !1),
                a
        };
    var d = a.fn.confirmation; a.fn.confirmation = function (b) {
        var d = this; return this.each(function () {
            var e = a(this),
                f = e.data("bs.confirmation"),
                g = "object" == typeof b && b; g = g || {},
                    g.all_selector = d.selector, (f || "destroy" != b) && (f || e.data("bs.confirmation", f = new c(this, g)),
                        "string" == typeof b && f[b]())
        })
    },
        a.fn.confirmation.Constructor = c, a.fn.confirmation.noConflict = function () { return a.fn.confirmation = d, this }
}(jQuery);